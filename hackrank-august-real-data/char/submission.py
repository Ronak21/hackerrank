from collections import deque
import array, base64, zlib, re, hashlib, string, math, uuid
import cPickle as pickle
import nltk.stem as nltk

OFFLINE = False

UNIGRAM = """
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
poOaNvd9Ai6zkCxum7pH+P8BSaV2WA==
"""

CHGRAM = """
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
gJ+2+nmyChastNd/wvqxknMwGPUULk9Z5FOTC9Nc7gK7M2tLPZvsQkuIpLW+RVLpNcjrqavPUOnM
KE59PY4sTw/itqFeQksDfYrSsdkwjfR88Ny1fBhStjyMKZtJ3Er1pfMda9Zr4PqxFduxbOOarMFR
rEB/eqxjodQgQ3s2i0PWMlhrW8+EPi9gmvdC/R529FxdYEfPEwdobtEr9DVOlfSXVzFsvFotTiW8
ay81vw9eRp2eaW69nv2HN+jVHIz0rTcZXa3+l1OdTMCZWNf6a0zVlX4Rj68uNYEZdaE5Sc46Wpse
rE7lB8BETgDG8gowkh8DTVtRB/oItfjyNtBDLrBqfe79+F6zhNaz1MCVnAKc9A4uHfV+kkHvgWH1
O7Ffd7o7Sav/Qwaul2xX60YfxcLE1heYsGwGVTbzNIl5XLlPxySztPg20Z+08nVgJx8DNjx9YrJg
MvKXJ5nonKTXTZwa9BiSjL8jiXFektDiJNX7oDyp5GhgrbdzUDCIk5KlNvHYdSQ+Yz9x9TSaE/GF
JSaIE5Mak1D3xe6DsXZYcd9hTYlhYNYYelUeacK2Vqanw+ODMXRo5Elgp7dRDrFPUurtZBV6JNfV
8kFgpY+ThUaTrIQvdMjZtOYmGoZQYzIC85syxHogNlrr2Ry48jLKWaubaIjPNDJ4/KFwXX2DUe7r
32Gb65mTuyHbWjfQ7djbjXVBEsl/gKk6XJDQKW6uJ1M2k1OBpf6FnEIT3I9b82bcSrfBue6SEeU2
+iJXd3oSDuG22qI4uIMxz+31aUpNTLjuqH/g3GwaUnfF5n0x6SYYUSWshVWq2zjI2OBUuflnrwrW
ysqU4KrSwzlVm+iqXL2Sq013X/n6KQ4C/QxirQr1NWxbRfREFevlMKxaMQqrmX1ztaaLcxNTVSPo
eaul2bNlrFWdboU3q3dsrwZ5CjjKrcBJTofltulE8h5/1lapzyGAxsY0QDN+TqxQiwFLbf3JVsca
9NCjhtP/D9Aqpl8=
"""


################# Model ####################
def myhash(content, salt):
	return int(hashlib.md5(str(content)+str(salt)).hexdigest(), 16)

class bloomfilter:
	def __init__(self, m=310019, k=2):
		self.m = m;
		self.k = k
		self.array = [False] * self.m
		self.salt = [
		'80cd5aa1-0620-40f3-941f-fe6ac1981ab7',
		'b9df4e35-c4d8-4697-a3df-3399faf1ac0d',
		'40ac135a-801b-4dbb-89e7-462e8898d068']

	def __getitem__(self, token):
		for i in xrange(self.k):
			idx = abs(myhash(token, self.salt[i])) % self.m
			if not self.array[idx]:
				return False
		return True

	def fromhistogram(self, histogram):
		for token in histogram:
			for i in xrange(self.k):
				idx = abs(myhash(token, self.salt[i])) % self.m
				self.array[idx] = True
		return self

	def fromstring(self, encodestr):
		bytes = array.array("B")
		bytes.fromstring(zlib.decompress(base64.decodestring(encodestr)))
		idx = 0
		for byte in bytes:
			for bit in range(0, 8):
				if (byte & (1 << bit)):
					self.array[bit+idx] = True
			idx += 8
		return self

	def tostring(self):
		bytes = array.array("B")
		num = 0
		for i in xrange(self.m):
			if self.array[i]:
				num |= (1 << (i % 8))
			if (i+1) % 8 == 0:
				bytes.append(num & 0xFF)
				num = 0
		if num != 0:
			bytes.append(num & 0xFF)
		return base64.encodestring(zlib.compress(bytes.tostring(), 9))


################ Algorithm ################
def getCorpus():
	f = file("large.txt", "r")
	lines = f.readlines()
	return filter(lambda x : len(x) != 0, [ stem(token.lower()) for line in lines for token in line.split() ])

def getDict():
	f = file("dict.txt", "r")
	lines = f.readlines()
	return [ token.strip().lower() for token in lines ]

def getUnigram(tklist):
	unigram = {}
	for token in tklist:
		unigram[token] = unigram.get(token, 0)+1
	print len(unigram)
	bftr = bloomfilter()
	return bftr.fromhistogram(unigram)

def loadUnigram():
	bftr = bloomfilter()
	return bftr.fromstring(UNIGRAM)

def getBigram(tklist):
	bigram = {}
	'''
	tkPairList = zip(tklist[:-1], tklist[1:])
	for tkPair in tkPairList:
		bigram[tkPair] = bigram.get(tkPair, 0)+1
	'''
	bftr = bloomfilter()
	return bftr.fromhistogram(bigram)

def loadBigram():
	return bloomfilter()

def getCharGram(tklist):
	pattern = re.compile('[\W_]+')
	gram = {}
	for token in set(tklist):
		if len(filter(lambda ch:ord(ch)>=128, token)) != 0:
			continue
		token = "^" + pattern.sub('', token) + "$"
		# unigram
		for ug in token:
			gram[ug] = gram.get(ug, 0) + 1
		# bigram
		for bg in zip(token[:-1], token[1:]):
			key = "".join(bg)
			gram[key] = gram.get(key, 0) + 1
	return gram

def loadCharGram():
	return pickle.loads(zlib.decompress(base64.decodestring(CHGRAM)))

stemmer = nltk.porter.PorterStemmer()

def stem(word):
	if word.endswith("\'s"):
		word = word[:-2]
	word = word.translate(None, string.digits + string.punctuation.translate(None, "#"))
	if word.endswith("ed"):
		return stemmer.stem(word)
	if word.endswith("ing"):
		return stemmer.stem(word)
	return word

def safelog(val):
	if val == 0.0:
		return float("-Inf")
	return math.log(float(val))

alphabet = 'abcdefghijklmnopqrstuvwxyz'

def getCandidate(token):
	cand, q = [], deque([(token, [])])
	while len(q) != 0:
		word, pos = q.popleft()
		idx = word.find("#")
		if idx == -1:
			cand.append((word, pos))
			continue
		pos.append(idx)
		for c in alphabet:
			nword = word[:idx] + c + word[idx+1:]
			q.append((nword, pos))
	return cand

# Laplace smoothing
def getCharScore(cand, gram):
	word, pos = cand;
	score, V = 0.0, len(filter(lambda x: len(x)==1, gram))
	for idx in pos:
		c = word[idx]
		if idx == 0:
			score += (safelog(gram.get("^"+c, 0) + 1) - safelog(gram["^"] + V))
		if idx > 0:
			score += (safelog(gram.get(word[idx-1]+c, 0) + 1) - safelog(gram.get(word[idx-1], 0) + V))
		if idx < len(word)-1:
			score += (safelog(gram.get(c+word[idx+1], 0) + 1) - safelog(gram.get(word[idx+1], 0) + V))
		if idx == len(word)-1:
			score += (safelog(gram.get(c+"$", 0) + 1) - safelog(gram["$"] + V))
	return score

stoplist = [
'the', 'of', 'and', 'to', 'in', 'a', 'is', 'that', 'for', 'it', 'as', 'was', 'with',
'be', 'by', 'on', 'not', 'he', 'i', 'this', 'are', 'or', 'his', 'from', 'at', 'which',
'but', 'have', 'an', 'had', 'they', 'you', 'were', 'their', 'one', 'all', 'we', 'can',
'her', 'has', 'there', 'been', 'if', 'more', 'when', 'will', 'would', 'who', 'so', 'no']

def getMaxScore(cand, prev, wugram, chgram):
	valid = filter(lambda x: wugram[x[0]], cand)
	for word, _ in valid:
		if word in stoplist:
			return word
	if len(valid) != 0:
		return max(valid, key=lambda x:getCharScore(x, chgram))[0]
	else:
		return max(cand, key=lambda x:getCharScore(x, chgram))[0]

def printDiffChar(origin, answer):
	print '\n'.join(map(lambda u:u[1], filter(lambda u:u[0] == '#', zip(origin, answer))))

############### Main Function ##################
if __name__ == "__main__":
	# load model
	if OFFLINE:
		corpus = getCorpus()
		unigram = getUnigram(corpus)
		chgram = getCharGram(corpus)
	else:
		unigram = loadUnigram()
		chgram = loadCharGram()

	# read input
	snippet = raw_input()
	prev = None
	for token in snippet.split():
		token = token.lower()
		if "#" in token:
			token = stem(token)
			cand = getCandidate(token)
			ans = getMaxScore(cand, prev, unigram, chgram)
			prev = ans
			# print "%s  =>  %s" % (token, ans)
			printDiffChar(token, ans)
		else:
			prev = token